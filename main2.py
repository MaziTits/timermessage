import telebot
from telebot import types
import threading
from config import  main_menu_buttons, markup_main_menu, channels_id, channels_link, games, humster_buttons, hot_buttons, bcoin2048_buttons, blum_buttons, bitton_buttons, mtk_buttons, cats_buttons, fuel_buttons, zavod_buttons, memefi_buttons,vertus_buttons, tapswap_buttons, pixeltap_buttons, pocketfi_buttons,  cyber_finance_buttons, wave_wallet_mining_ocean_buttons, markup_games, memefi_markup,  mtk_markup, hot_markup, blum_markup, cats_markup,  fuel_markup, zavod_markup, bitton_markup, vertus_markup,  humster_markup, tapswap_markup, pocketfi_markup, bcoin2048_markup,  wave_wallet_mining_ocean_markup, cyber_finance_markup, pixeltap_markup
import re

print('!Bot is started')

TOKEN = '7327385734:AAFk35iDOjUMHzj47yv5ILmWxork0GL2Thk'

# –¥–ª—è —Ç–µ—Å—Ç–∞
# TOKEN = '7264048007:AAGvjW5AG_3oRn-CVHv2C8Q3yilkUs0bPxY'
# t.me/tetris_pekis_bot

user_states = {}

chat = ''
description = ''
timer = ''
cancel_message = '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start ! \n' + channels_link[0] + '\n' + channels_link[1]

bot = telebot.TeleBot(TOKEN)

# start
@bot.message_handler(commands=['start'])
def start(message):
    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç {0.first_name}, –º–µ–Ω—è –∑–æ–≤—É—Ç –ª–µ–Ω–∏–≤–µ—Ü - –ß–∏–ª. –Ø –±—É–¥—É —Ç–≤–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º. –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –∫–ª–µ–π–º–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –≤–æ –≤—Å—è–∫–∏—Ö —Ç–∞–ø–∞–ª–∫–∞—Ö –ø–æ —Ç–∏–ø—É –Ω–æ—Ç–∫–æ–∏–Ω–∞ !' .format(message.from_user), reply_markup=markup_main_menu())
    else:
        bot.send_message(message.chat.id, '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã! \n 1.–ö–∞–Ω–∞–ª ' + channels_link[0] + '\n 2.–ß–∞—Ç ' + channels_link[1] .format(message.from_user))
    
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def check_sub(message, id):
  user_id = message.from_user.id
  memeber = bot.get_chat_member(id, user_id)
  if memeber.status in ['member', 'administrator', 'creator']:
    return True
  else:
    return False
  
# –≤—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (—Ç–∞–π–º–µ—Ä)
def send_delayed_message(chat_id, text, delay):
    def task():
        bot.send_message(chat_id, text)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    threading.Timer(delay, task).start()

# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
def handle_delay(message,delay,text):
    chat_id = message.chat.id
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    bot.send_message(chat_id, f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    send_delayed_message(chat_id, text, delay)


# –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥—ã
def convert_time_to_seconds(hours, minutes):
    return convert_hours_to_seconds(hours) + convert_minutes_to_seconds(minutes)

def convert_hours_to_seconds(hours):
    return hours * 3600

def convert_minutes_to_seconds(minutes):
    return minutes * 60

# /////////////////////////////////////////////////–º–µ–Ω—é//////////////////////////////////////////////////////////
# –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text in main_menu_buttons)
def handle_first_buttons(message):
    description = '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –ø–æ–º–æ—â–∏ –ª—é–¥—è–º, –æ–Ω –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∏–≥—Ä—ã –∏ –∑–∞–±–∏—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã. –ï—Å–ª–∏ –≤—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–æ–µ–∫—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –æ–± —ç—Ç–æ–º –∏ –º—ã –µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–º. \n @dante_911  \n @Lioopa'
    feedback = '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Ç—Å–≤–∞ –ø–∏—à–∏—Ç–µ   \n @dante_911  \n @Lioopa'

    arr_buttons = main_menu_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
           
            bot.send_message(message.chat.id, description)
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, feedback)
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))






# /////////////////////////////////////////////////–∏–≥—Ä—ã//////////////////////////////////////////////////////////
# —Ç–∞–π–º–µ—Ä
@bot.message_handler(func=lambda message: message.text in games)
def handle_first_buttons(message):
    arr_buttons = games

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_main_menu())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=blum_markup())
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=humster_markup())
        elif message.text == arr_buttons[3]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=zavod_markup())
        elif message.text == arr_buttons[4]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=pocketfi_markup())
        elif message.text == arr_buttons[5]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=pixeltap_markup())
        elif message.text == arr_buttons[6]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=cats_markup())
        elif message.text == arr_buttons[7]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=bitton_markup())
        elif message.text == arr_buttons[8]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=hot_markup())
        elif message.text == arr_buttons[9]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=mtk_markup())
        elif message.text == arr_buttons[10]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=bcoin2048_markup())
        elif message.text == arr_buttons[11]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=cyber_finance_markup())
        elif message.text == arr_buttons[12]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=memefi_markup())
        elif message.text == arr_buttons[13]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=vertus_markup())
        elif message.text == arr_buttons[14]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=fuel_markup())
        elif message.text == arr_buttons[15]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=tapswap_markup())
        elif message.text == arr_buttons[16]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=wave_wallet_mining_ocean_markup())
        
        
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))




# humster
@bot.message_handler(func=lambda message: message.text in humster_buttons)
def handle_first_buttons(message):
    chat = '[Hamster Kombot](https://t.me/hamster_kombat_chat)'
    description = '[Hamster Kombot](https://t.me/hamster_kombaT_bot/start?startapp=kentId1901528332) ‚Äî —ç—Ç–æ –∏–≥—Ä–∞ –≤ –∂–∞–Ω—Ä–µ –∫–ª–∏–∫–µ—Ä, –≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ Telegram. –í –Ω–µ–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ö–æ–º—è–∫–∞ –≤ –≥–µ–Ω–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –∫–ª–∏–∫–∞—è –Ω–∞ –º–æ–Ω–µ—Ç–∫—É (–æ—Ç—Å—é–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –∫–ª–∏–∫–µ—Ä) –∏ –ø–æ–∫—É–ø–∞—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è.'
    timer = '–ü–æ—Ä–∞ –ø–æ—á–µ—Å–∞—Ç—å —Å–≤–æ—é –º–æ—Ö–Ω–∞—Ç–∫—É \n https://t.me/hamster_kombaT_bot/start?startapp=kentId1901528332 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = humster_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 3
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# blum
@bot.message_handler(func=lambda message: message.text in blum_buttons)
def handle_first_buttons(message):
    chat = '[Blum](https://t.me/blumcrypto)'
    description = '[Blum](t.me/BlumCryptoBot/app?startapp=ref_TvS5V1tzQv) Crypto ‚Äî —ç—Ç–æ –≥–∏–±—Ä–∏–¥–Ω–∞—è –±–∏—Ä–∂–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∞—è –ª–µ–≥–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º –º–æ–Ω–µ—Ç–∞–º –∏ —Ç–æ–∫–µ–Ω–∞–º, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç—ã–º –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–∞–º —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram. –≠—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞ –≤ Telegram, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ñ–∞—Ä–º Points, —ç—Ç–æ –∂–µ –≤ –±—É–¥—É—â–µ–º —Ç–æ–∫–µ–Ω.'
    timer = '–Ø —Ö–æ—Ç—å –∏ –Ω–µ —Ñ–µ–µ—á–∫–∞, –Ω–æ –ø–æ—Ä–∞ –º–µ–Ω—è –ø–æ—Ç—ã–∫–∞—Ç—å... \n t.me/BlumCryptoBot/app?startapp=ref_TvS5V1tzQv \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = blum_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 8
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# hot
@bot.message_handler(func=lambda message: message.text in hot_buttons)
def handle_first_buttons(message):
    chat = '[Hot](https://t.me/hotonnear)'
    description = '[HOT](https://t.me/herewalletbot/app?startapp=9415231) - —ç—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã NEAR –≤–Ω—É—Ç—Ä–∏ Telegram. –ë–ª–∞–≥–æ–¥–∞—Ä—è –º–µ—Ç–∞-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HOT –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ, –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã. –≠—Ç–æ –ø–µ—Ä–≤–∞—è FT, –∫–æ—Ç–æ—Ä–∞—è –æ–±–ª–∞–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞ L1'
    timer = '–ü–æ—Ä–∞ –ø–æ–¥–∫–∏–Ω—É—Ç—å –¥—Ä–æ–≤ üî• \n https://t.me/herewalletbot/app?startapp=9415231 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    

    arr_buttons = hot_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 0
            minutes = 3
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user)) 




# PocketFi
@bot.message_handler(func=lambda message: message.text in pocketfi_buttons)
def handle_first_buttons(message):
    chat = '[PocketFi](https://t.me/pocketfi)'
    description = '[PocketFi](t.me/pocketfi_bot/Mining?startapp=1901528332) ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫—Ä–æ—Å—Å—á–µ–π–Ω –ø–µ—Ä–µ–≤–æ–¥–æ–≤, –æ–±–º–µ–Ω–æ–≤, –∞ —Ç–∞–∫–∂–µ —Å–Ω–∞–π–ø–∏–Ω–≥–∞ –∏ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –û–Ω–æ –ø—Ä–∏–∑–≤–∞–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å DeFi –ø—Ä–∏ –ø–æ–º–æ—â–∏ Telegram –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Mini Apps. –° –Ω–∏–º –º–æ–∂–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Å–Ω–∞–π–ø–∏–Ω–≥–µ. –ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã TON –Ω–∞ ETH –∏ —Ç.–¥.'
    timer = '–ö—Ä—É—Ç–∏ –ª—É–¥–∏–ª—å–Ω—é \n t.me/pocketfi_bot/Mining?startapp=1901528332 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = pocketfi_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 5
            minutes = 55
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# PixelTap
@bot.message_handler(func=lambda message: message.text in pixeltap_buttons)
def handle_first_buttons(message):
    chat = '[PixelTap](https://t.me/pixelverse_xyz)'
    description = '[PixelTap](https://t.me/pixelversexyzbot?start=1901528332) - —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –±—É–¥—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ PIXFI, —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∞–∏—Ä–¥—Ä–æ–ø–æ–º, –Ω–æ –∏ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —á–∞—Å—Ç—å—é –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π. –†–∞–∑–≤–µ —ç—Ç–æ –Ω–µ—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ?'
    timer = '–ü–æ—Ä–∞ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø–∏–∫—Å–ª–µ–ª–∏ \n https://t.me/pixelversexyzbot?start=1901528332 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = pixeltap_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 8
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# zavod
@bot.message_handler(func=lambda message: message.text in zavod_buttons)
def handle_first_buttons(message):
    chat = '[Zavod](https://t.me/mdaowallet_telegram_chat)'
    description = 'MDAO Telegram Wallet –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–µ—Å—å–º–∞ –Ω–µ–æ–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ - —Ä–∞–±–æ—Ç—É –Ω–∞ [Zavod](https://t.me/Marswallet_bot?start=ref_1901528332). –≠—Ç–æ—Ç –∑–∞–≤–æ–¥ –æ—Ç–∫—Ä—ã–ª—Å—è –∏ —Ä–∞–∑—ã—Å–∫–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–∞–º—ã–µ –±–∞–∑–æ–≤—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏. –û–±–µ—â–∞—é—Ç —Å–¥–µ–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É, –Ω–æ –∑–∞–±—É–¥—å—Ç–µ –æ –∫–æ—Ñ–µ –∏ –ø–µ—á–µ–Ω—å—è—Ö - –∏—Ö –∑–¥–µ—Å—å –Ω–µ—Ç.'
    timer = '–ö—Ä–∏–ø—Ç–∞ –¥–ª—è –ª–æ—Ö–æ–≤, –∑–∞–≤–æ–¥ —Ç–µ–º–∞ –Ω–æ—Ä–º –ø–∞—Ü–∞–Ω–æ–≤ \n https://t.me/mdaowallet_telegram_chat \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = zavod_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 0
            minutes = 1
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# cats
@bot.message_handler(func=lambda message: message.text in cats_buttons)
def handle_first_buttons(message):
    chat = '[Catizen](https://t.me/CatizenAI/1)'
    description = '[Catizen](https://t.me/catizenbot/gameapp?startapp=r_1312_2420164) AI ‚Äî —ç—Ç–æ –ø—Ä–æ–µ–∫—Ç Play to Airdrop, —Å–æ—á–µ—Ç–∞—é—â–∏–π –≤ —Å–µ–±–µ Metaverse, Game Fi –∏ Ai. –ö–æ–º–∞–Ω–¥–∞ Catizen Ai –∑–∞–∫–ª—é—á–∏–ª–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å Ton Fish, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º—É Metaverse –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
    timer = '–ü–æ—Ä–∞ –ø–æ—á–µ—Å–∫–∞—Ç—å —Å–≤–æ–∏—Ö –∫–∏—Å–æ–∫ \n https://t.me/catizenbot/gameapp?startapp=r_1312_2420164 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = cats_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 8
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# –±–∏—Ç—Ç–æ–Ω
@bot.message_handler(func=lambda message: message.text in bitton_buttons)
def handle_first_buttons(message):
    chat = '[Bitton](https://t.me/bittonapp)'
    description = '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ [Bitton](https://t.me/bittonapp_bot?start=eq86dih4) ‚Äì —ç—Ç–æ —á–∞—Å—Ç—å –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –≤ ¬´–¢–µ–ª–µ–≥—Ä–∞–º–º¬ª, –≤ –∫–æ—Ç–æ—Ä–æ–π –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ–±—ã—Ç—å —Å—Ä–∞–∑—É –¥–≤–∞ —Ç–æ–∫–µ–Ω–∞: BTC –∏ BTN. –í —ç—Ç–æ–º –æ–±–∑–æ—Ä–µ –º—ã —Ä–∞–∑–±–µ—Ä–µ–º, —á–µ–≥–æ –∂–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç —Ç–∞–ø–∞–ª–∫–∏ Bitton –∏ –∫–∞–∫ –ª—é–¥–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–π –±–æ—Ç –≤ ‚Äú–¢–µ–ª–µ–≥—Ä–∞–º–º‚Äù.'
    timer = '–ü–æ—Ç—ã–∫–∞–π –º–æ–Ω–µ—Ç—É, –∞ —Ç–æ –æ–Ω–∞ —É–∂–µ –∑–∞–ª–µ–∂–∞–ª–∞—Å—å \n (https://t.me/bittonapp_bot?start=eq86dih4 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = bitton_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 24
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))



# mtk
@bot.message_handler(func=lambda message: message.text in mtk_buttons)
def handle_first_buttons(message):
    chat = '[MTK](https://t.me/metatokens_mtk)'
    description = '[MTK](https://t.me/mtkbossbot?start=ref1901528332) CLICKER MAFIA - –∫–ª–∏–∫–µ—Ä –æ—Ç –∫–∞–∑–∏–Ω–æ METATOKENS, –≥–¥–µ –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –µ–≥–æ —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–º.'
    timer = '–ö–∞–∂–µ—Ç—Å—è —Ç—ã –∑–∞–¥–æ–ª–∂–∞–ª –Ω–∞–º –∫—Ä—É–º–Ω—É—é —Å—É–º–º—É –¥–µ–Ω—è–≥...\n https://t.me/mtkbossbot?start=ref1901528332 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = mtk_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 2
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# bcoin2048
@bot.message_handler(func=lambda message: message.text in bcoin2048_buttons)
def handle_first_buttons(message):
    chat = '[Bcoin2048](https://t.me/bcoin2048)'
    description = '[Bcoin](https://t.me/Bcoin2048bot/app?startapp=ref_pCGp_C-12nFdKZCldsgWLLes) - –≤—Å–µ–º–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞ –≤ 2048 –≤—ã—à–ª–∞ –≤ –º–∏—Ä–µ web3'
    timer = '–ü—Ä–æ—à–ª–æ 21600 —Å–µ–∫—É–Ω–¥,–∞ —Ç—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ —Å–æ–±—Ä–∞–ª 2048 \n https://t.me/Bcoin2048bot/app?startapp=ref_pCGp_C-12nFdKZCldsgWLLes \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = bcoin2048_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 6
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))



# cyber finance
@bot.message_handler(func=lambda message: message.text in cyber_finance_buttons)
def handle_first_buttons(message):
    chat = '[cyber finance](https://t.me/CyberFinanceChat)'
    description = '[Cyber Finance](https://t.me/CyberFinanceBot?start=cj1xaXE0ejk3Y2dZMjcmdT1yZWY=) - —ç—Ç–æ DeFi –¥–ª—è –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏  –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ Telegram. '
    timer = '–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è —Ä–∞–∑–∏—Ç—å —è–π—Ü–æ \n https://t.me/CyberFinanceBot?start=cj1xaXE0ejk3Y2dZMjcmdT1yZWY= \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = cyber_finance_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 0
            minutes = 1
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# memefi
@bot.message_handler(func=lambda message: message.text in memefi_buttons)
def handle_first_buttons(message):
    chat = '[memefi](https://t.me/memeficlub)'
    description = '[MemeFi](https://t.me/memefi_coin_bot?start=r_b55dbd1a8f) —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É, —Å—Ö–æ–∂–µ–º—É —Å NotCoin: –Ω—É–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å –ø–æ —ç–∫—Ä–∞–Ω—É, –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∫–æ–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Å–æ–±—ã–µ –∑–∞–¥–∞–Ω–∏—è. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å MemeFi –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∫–∞–∑–æ—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –∏–≥—Ä—É –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.'
    timer = '–ü–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∫–∞–∑–æ—á–Ω–æ–µ –±–æ–ª–æ—Ç–æ –∏ –Ω–∞–¥–∞–≤–∞—Ç—å –≤—Å–µ–º –ø–æ —â–∞–º \n https://t.me/memefi_coin_bot?start=r_b55dbd1a8f \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = memefi_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 3
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# vertus
@bot.message_handler(func=lambda message: message.text in vertus_buttons)
def handle_first_buttons(message):
    chat = '[Vertus](https://t.me/thevertus_chat)'
    description = '[Vertus](https://t.me/vertus_app_bot/app?startapp=1901528332)- —ç—Ç–æ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ Web3-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º–º. –í —Å–∞–º–æ–π –∏–≥—Ä–µ –º—ã –¥–æ–±—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã $VERT, –∫–æ—Ç–æ—Ä—ã—Ö –≤ –±—É–¥—É—â–µ–º –æ–∂–∏–¥–∞–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥ (–ø–æ –∑–∞–≤–µ—Ä–µ–Ω–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤).'
    timer = '–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –¥–µ—Ä–µ–≤–Ω—é \n https://t.me/vertus_app_bot/app?startapp=1901528332 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = vertus_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 2
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# fuel
@bot.message_handler(func=lambda message: message.text in fuel_buttons)
def handle_first_buttons(message):
    chat = '[Fuel](https://t.me/fueljetton)'
    description = '[Fuel](https://t.me/fueljetton_bot/app?startapp=1901528332) Jetton - —ç—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–º –±–ª–æ–∫—á–µ–π–Ω–µ TON, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –º–∞–π–Ω–∏—Ç—å –Ω–µ—Ñ—Ç—å (Fuel Mining) –∏–ª–∏ –ø–æ-–Ω–∞—à–µ–º—É –¥–æ–±—ã–≤–∞—Ç—å –Ω–µ—Ñ—Ç—å (—Ç–æ–ø–ª–∏–≤–æ).'
    timer = '–ü–æ—Ä–∞ –ø–∞–º–ø–∏—Ç—å –Ω–µ—Ñ—Ç—å \n https://t.me/fueljetton_bot/app?startapp=1901528332 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = fuel_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 12
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# tapswap
@bot.message_handler(func=lambda message: message.text in tapswap_buttons)
def handle_first_buttons(message):
    chat = '[Tapswap](https://t.me/tapswap)'
    description = '[TapSwap](https://t.me/tapswap_mirror_1_bot?start=r_1901528332) ‚Äî —ç—Ç–æ –∏–≥—Ä–∞-–∫–ª–∏–∫–µ—Ä –≤ Telegram, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–∞–π–Ω–∏–Ω–≥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –≠—Ç–æ –æ—á–µ—Ä–µ–¥–Ω–∞—è —Ç–∞–ø–∞–ª–∫–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON, –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é. '
    timer = '–ü–æ—Ä–∞ –ø–æ—Ç–∞–ø–∞—Ç—å \n https://t.me/tapswap_mirror_1_bot?start=r_1901528332 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = tapswap_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 0
            minutes = 1
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É): \n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω\n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω \n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# Wave Wallet mining Ocean
@bot.message_handler(func=lambda message: message.text in wave_wallet_mining_ocean_buttons)
def handle_first_buttons(message):
    chat = '[Wave Wallet mining Ocean](https://t.me/wave_announcements)'
    description = '[Wave Walley](t.me/waveonsuibot/walletapp?startapp=5066328)‚Äî —ç—Ç–æ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π (–≤ –æ–±–æ–∑—Ä–∏–º–æ–º –±—É–¥—É—â–µ–º) –∫–æ—à–µ–ª—ë–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–∞–π–Ω–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞ $OCEAN. –°–∞–º –∫–æ—à–µ–ª—ë–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ SUI, —á—Ç–æ —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–¥–æ–≤–∞—Ç—å, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ç–∏ SUI –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ + –º–∏–∑–µ—Ä–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏, –∏–º–µ–µ—Ç –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.'
    timer = '–ó–∞–ø—Ä—ã–≥–∏–≤–∞–π –Ω–∞ –≤–æ–ª–Ω—É \n https://t.me/waveonsuibot?startapp=5066328 \n –ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'
    
    arr_buttons = wave_wallet_mining_ocean_buttons

    if check_sub(message=message, id=channels_id[0]) == True and check_sub(message=message, id=channels_id[1]) == True:
        if message.text == arr_buttons[0]:
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[1]:
            bot.send_message(message.chat.id, chat .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[2]:
            bot.send_message(message.chat.id, description .format(message.from_user), parse_mode='Markdown')
        elif message.text == arr_buttons[3]:
            hours = 2
            minutes = 0
            handle_delay(message, convert_time_to_seconds(hours=hours, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())
        elif message.text == arr_buttons[4]:
            user_states[message.chat.id] = timer
            self_timer = '.—Ö:\n 1 —á–∞—Å = 60 –º–∏–Ω \n2 —á–∞—Å–∞ = 120 –º–∏–Ω\n3 —á–∞—Å–∞ = 180 –º–∏–Ω \n4 —á–∞—Å–∞ = 240 –º–∏–Ω \n5 —á–∞—Å–æ–≤ = 300 –º–∏–Ω \n6 —á–∞—Å–æ–≤ = 360 –º–∏–Ω \n7 —á–∞—Å–æ–≤ = 420 –º–∏–Ω \n8 —á–∞—Å–æ–≤ = 480 –º–∏–Ω \n9 —á–∞—Å–æ–≤ = 540 –º–∏–Ω\n10 —á–∞—Å–æ–≤ = 600 –º–∏–Ω \n11 —á–∞—Å–æ–≤ = 660 –º–∏–Ω \n12 —á–∞—Å–æ–≤ = 720 –º–∏–Ω'
            bot.send_message(message.chat.id, self_timer .format(message.from_user))
    else:
        bot.send_message(message.chat.id, cancel_message .format(message.from_user))


# —Å–≤–æ–π —Ç–∞–π–º–µ—Ä
@bot.message_handler(func=lambda message: True)
def self_timer_func(message):
    check = lambda s: not all('0'<=x<='9' for x in s.lower())
    if check(message.text) == False:
        minutes = int(message.text)
        timer = user_states[message.chat.id]
        if timer != '':
            handle_delay(message, convert_time_to_seconds(hours=0, minutes=minutes), timer)
            bot.send_message(message.chat.id, "ü¶•", reply_markup=markup_games())


bot.polling(none_stop = True, interval =0) 